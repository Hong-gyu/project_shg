package day19;

public class Rewind4 {

	public static void main(String[] args) {
		/* 반복문
		 * 	- 규칙적인 작업을 여러번 할 때 사용. 반복횟수, 규칙성을 찾아야 함
		 * 
		 *  - 반복문 종류 : for문, while문, do-while문
		 *   1. for문 : 문법으로 초기화, 조건식, 증감식을 입력하는 위치가 있다.
		 *   	- 초기화 : 반복문에서 사용하는 변수를 초기화. 생략 가능
		 *   	- 조건식 : 반복문 동작을 결정하는 곳으로 참이면 동작, 거짓이면 종료. 생략 가능(생략하면 항상 참)
		 *   	- 증감식 : 조건식에서 사용하는 변수를 증가하거나 감소시킴
		 *   	- 초기화, 조건식, 증감식이 반복횟수를 결정
		 *  	- for( 초기화(int i = 초기값) ; 조건식(i<범위) ; 증감식(++, --) {
		 *  						실행문;
		 *    	}
		 *     1-1) 향상된 for 문 : 배열이나 리스트일 때 향상된 for문 사용
		 *      - 배열이나 리스트의 원소들을 전체 탐색 할 때 사용
		 *  	- for ( 타입변수명 : 배열이나 리스트 ) {
		 *  					실행문;
		 *    	}
		 *  	- 이중 반복문  
		 *  	- for( 초기화(int i = 초기값) ; 조건식(i<범위) ; 증감식(++, --) {
		 *  						for(초기화, 조건식, 증감식) {
		 *  								실행문;
		 *  						}
		 *    	}
		 *   2. while문 : (강사는) 반복횟수가 정해져 있지 않거나, 순차적으로 증가/감소하지 않는 경우에 사용
		 *  	- while((조건식)) {
		 *  		실행문;
		 *    	}    
		 *    	- 조건식은 생략 불가능
		 *   3. do-while문 : 무조건 1번은 실행. ; 이 들어감
		 *   	-  do {
		 *    				실행문;
		 *   	   } while (조건식);
		 *   
		 *  - 반복문 사용시 유의사항
		 *   1. 의도치 않은 무한 루프가 생기지 않도록 주의  
		 *   2. 조건식을 잘못 지정해서 실행되지 않는 경우가 생기지 않도록 주의 
		 *  - break : switch문/반복문을 빠져 나가는 역할. if문과 세트로 같이 나옴
		 *  - continue : for문에서는 증감식 위치로 점프(스킵), while문에서는 조건식 위치로 스킵. if문과 세트로 같이 나옴. continue를 만나면 아래에 코드가 있더라도 실행하지 않고 지정된 위치로 이동 
		 * */ 

	}

}
