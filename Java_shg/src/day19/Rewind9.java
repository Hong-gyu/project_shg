package day19;

public class Rewind9 {

	public static void main(String[] args) {
		/* 예외처리
		 *  - 코드로 해결 가능 부분 (cf. 오류 : 코드로 해결할 수 없는 부분)
		 *  - 예외처리를 해야 하는 이유
		 *   1. 프로그램이 중단되는 것을 막기 위함 
		 *   2. 예외 상황을 발견하고 그 상황을 해결하기 위함
		 *  - 예외의 종류
		 *   1. 일반예외 : 컴파일 단계 부터 확인되어 실행되지 않는 예외
		 *   	-> 일반예외는 예외처리를 하지 않으면 에러가 발생함
		 *   2. 실행예외 : 컴파일(내가 쓴 코드를 컴퓨터가 확인함) 단계에서 확인되지 않고 실행 과정에서 나타나는 예외
		 *   	-> 실행예외는 예외처리를 하지 않아도 에러가 발생하지 않음
		 *   	-> 실행예외의 종류
		 *   		1) 배열과 관련된 오류 : ArrayIndexOutOfBoundsException, ...
		 *   		2) 참조변수 사용시 오류 : NullPointerException(자주 사용할 것) 
		 *   		3) 나누기 사용시 오류 : ArithmeticException, ...
		 *   		4) 클래스 타입 변환시 오류 : ClassCastException, ...
		 *   		5) 문자열을 숫자로 변환시 오류 : NumberFormatException, ...    */
		
		/* 예외처리 방법
		 * 1. try
		 * 	- try {
		 * 			예외가 발생할 수 있는 코드; 
		 * 	  } catch(예외클래스명1 e ) {
		 * 			예외처리문;
		 * 	  } catch(예외클래스명2 e ) {
		 * 			예외처리문;
		 * 	  } finally {
		 * 			실행문
		 * 	  }
		 * 	- 이때 예외클래스명1은 에외클래스명2의 조상클래스이면 안됨
		 *  - finally : 예외처리 과정에서 메소드가 종료되도 무조건 실행
		 * 2. throws
		 * 	- 예외가 발생하면 직접 처리하지 않고 예외를 던져서 남이 처리하게 하는 방법
		 *  - 메소드 선언부에서 매개변수 옆에 throws 예외 클래스명을 입력하여 발생할 수 있는 예외를 알려줌
		 *    (단, 실행예외 인 경우 throws를 생략 할 수 있음)
		 * 3. 예외 던지기 : throw
		 *  - 자동으로 발생되는 예외가 아닌 변수의 조건에 따라서 예외를 발생시키고자 할 때 사용
		 *  - throw 는 예외 객체를 던져야 하기 때문에 일반저긍로 throw new 예외클래스명("예외메시지"); 형태로 던져짐 */
		
		
	}

}
