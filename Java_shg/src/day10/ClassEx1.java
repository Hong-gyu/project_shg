package day10;

public class ClassEx1 {

	public static void main(String[] args) {
		/* 좌표 평면의 점을 나타내는 클래스 (232. 454)
		 * 멤버변수 : 좌표(가로축, 세로측), 점(포인트) 
		 * 메소드 : xy좌표 출력 기능, 좌표 이동 기능
		 * */ 
		
		/* 자동차 클래스 만들기
		 * 멤버변수 : 제조사, 차종, 차명, 차체, 엔진, 바퀴, 핸들, 브레이크, 기어, 와이퍼, 시동, 시트, 계기판 ... 
		 * 메소드 : 시동켜기/끄기, 기어 변속, 브레이크 동작, 와이퍼 동작, 문 여닫기, 계기판 표출, 시트 이동 ...  
		 * */
		
		/* 게시판 클래스 만들기
		 * 멤버변수 : 제목, 내용, 작성자, 시간, 조회수, 추천/비추천 ... */
		
		/* 회원 클래스 만들기
		 * 멤버변수 : 아이디, 비밀번호, 가입일, 이름, 소속, 연락처, 등급, 주소, 이메일, 직업, 출석일수, ... */
		
		/* class 기본문법 
		 * 	class 클래스명 {
		 * 		접근제한자 멤버변수; (가장 먼저 만들어야 함)
		 *  	접근제한자 메소드; 
		 *  	public 생성자; (멤버 변수를 초기화 하는 역할)
		 * 	}
		 * */
		
		/* 접근제한자(sns에 내가 올린 게시글을 볼수있는 범위를 설정한다 생각하면 됨)
		 *  - public    : 본인 + 같은 패키지 + 자식 패키지 + 다른 클래스=> 전체 (전체공개)
		 *  - protected : 본인 + 같은 패키지 + 자식 클래스(상속에서 다시 설명)
		 *  - (default) : 본인 + 같은 패키지 => 지인 (친구공개)
		 *  - private   : 본인 클래스 (나만보기) => 본인 클래스 에서만 호출 가능, 
		 *  */
		
		/* 자동차 멤버변수
		 * 멤버변수 : 제조사, 차종, 차명, 차체, 엔진, 바퀴, 핸들, 브레이크, 기어, 와이퍼, 시동, 시트, 계기판 ...
		 * 이 중 접근제한자별로 나눈다면
		 * public(공통적인 내용인지) : 제조사, 차종, 차명, 차체, 엔진, 바퀴 ...  
		 * private(내가 바꿀 수 있는지) : 기어, 핸들, 브레이크, 와이퍼, 시동, 시트, 계기판 ...
		 *  */
		
		/* class 멤버변수 접근 방법
		 * 객체명.멤버변수명
		 * */
		
		// 클래스가 public 이려면 클래스 이름과 파일명이 같아야 한다.
		// 다르면 public을 붙일 수 없음
		
		/* 일반적으로 대부분의 멤버 변수는 private 으로 한다 ->
		 *  - 멤버변수의 값을 직접 수정할 수 없음.
		 *  - 멤버변수의 값을 수정 할 수 있는 public으로 된 메소드를 만들어줘야 함.
		 *  - 그리고 해당 메소드를 getter와 setter라고 부름.
		 *  - getter : private으로 된 멤버변수의 값을 확인하는 메소드
		 *  - setter : private으로 된 멤버변수의 값을 설정하는 메소드
		 *  - 정보수정은 어떤 기능을 통해 이루어져야 하기 때문에 별도의 기능에서 수정하도록 하게 함
		 * 일반적으로 대부분의 멤버 메소드는 public 으로 한다 -> 
		 * */
		
		/* 객체 생성 방법
		 * 클래스명 객체; // 실제 만들어진건 아니고 만들어질 예정(객체 선언)
		 * 클래스명 객체 = new 클래스명 (); // 실제 만들어짐(객체 선언과 동시에 생성)
		 * */
		
		/* 생성자 : 멤버변수를 초기화 하는 곳
		 * 모든 클래스는 생성자가 꼭 있어야 한다.
		 * 클래스에 생성자가 없으면 기본 생성자가 자동으로 만들어 짐
		 * 클래스에 생성자가 있으면 기본 생성자가 자동으로 만들어 지지 않음
		 * 메소드에서 리턴타입이 없고(void 아님), 메소드명이 클래스명과 동일
		 * 생성자는 객체를 생성할 때 원하는 생성자를 호출한다
		 * 생성자는 객체를 생성할 때를 제외하고 임의로 호출할 수 없다 
		 * 예 : Point pt = new Point();
		 * pt.Point(); // 생성자를 이렇게 호출할 수 없음
		 * 생성자는 여러개 있을 수 있다 -> 생성자 오버로딩
		 * */
		
		/*생성자 오버로딩은 매개변수의 종류가 다른 경우 만들 수 있다
		 * 매개변수의 갯수가 다른 경우 가능
		 * 매개변수의 타입이 다른 경우 가능 */
		
		/* 기본 생성자
		 * public 클래스명() {
		 * 		멤버 변수 초기화
		 * }
		 * */
		
		/* 생성자
		 * public 클래스명(매개변수){
		 * 			멤버변수 초기화;
		 * }*/
		
		A a = new A();
		a.num = 10; // public  : 클래스 A 와 ClassEx1은 같은 패키지에 있기 때문에 에러가 발생하지 않음
		B b = new B();
		b.num = 10; // protected : 클래스 B 와 ClassEx1은 같은 패키지에 있기 때문에 에러가 발생하지 않음
		C c = new C();
		c.num = 10; // default : 클래스 C와 ClassEx1은 같은 패키지에 있기 때문에 에러가 발생하지 않음
		D d = new D();
		// d.num = 10; 에러발생 -> num의 접근제한자가 private 이기 때문
		d.setNum(10);
		System.out.println(d.getNum());

	}

}
